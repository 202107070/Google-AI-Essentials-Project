*프롬프트 - AI 모델에 출력을 어떻게 생성해야 하는지 안내하는 텍스트 입력

*프롬프트 엔지니어링 - 생성형 AI에서 유용한 출력을 이끌어내는 효과적인 프롬프트를 개발하는 작업 

*퓨샷 프롬프팅

*대규모 언어 모델(LLM - Large Language Model) - 대량의 텍스트를 통해 학습된 모델로서 단어, 개념 ,구문 간의 패턴을 식별하고
이를 바탕으로 프롬프트에 대한 응답을 생성할 수 있는 AI모델

*할루시네이션 - AI가 사실이 아닌 내용을 출력하는 것

 프롬프트는 구체적으로 작성!

프롬프트를 계속 수정하는 과정을 통해 유용한 출력을 얻을 수 있음.

*프롬프팅 모범 사례
- 작업 내용 명시
- 필요한 컨텍스트 제공
작업을 수행하는 이유와 목적, 출력에 반드시 적용되어야 하는 규칙 또는 가이드라인, 도구가 고려해야 하는 관련 배경 정보
- 예시용 참고 자료 포함
참고 자료가 작업과 어떤 관련이 있는지 간략하게 설명합니다.

요구사항에 부합하는 양질의 예를 2~5개 사용합니다.

관련성이 있는 경우 사용자 본인의 작업물이나 오픈 소스 예시를 포함합니다.
- 결과물 평가하기
정확성

편향성

관련성

일관성
- 더 나은 결과를 위해
초기 프롬프트를 입력합니다.

AI 도구가 출력으로 응답합니다.

AI 생성 응답의 유효성을 평가합니다.

유효한 부분과 그렇지 않은 부분을 바탕으로 요청을 구체화합니다.

원하는 결과가 나올 때까지 이 과정을 반복합니다.

*샷 == 예시

*원샷 프롬프팅 => 예시가 1개

*퓨샷 프롬프팅 => 예시가 2개 이상 여러개, 다방면으로 유용함

*제로샷 프롬프팅 => 예시가 없음, 단순하고 직접적인 응답을 원할 때 효과적

*프롬프트 체이닝
프롬프트 체이닝(prompt chaining)은 사슬 고리를 연결하듯이 프롬프트를 서로 연결하는 기법입니다. 이는 복잡한 작업을 해결하는 데 유용한 또 다른 기법입니다. 프롬프트 체이닝은 하나의 프롬프트를 사용하는 대신 반복이라는 개념에 기반하여 AI 상호작용을 새로운 차원으로 끌어올립니다.

이 기법을 사용하려면 3단계를 거쳐야 합니다

작업 분석: 우선 복잡한 작업을 논리적 단계로 세분화합니다.

초기 프롬프팅: 첫 번째 단계를 효과적으로 처리할 수 있는 프롬프트를 작성합니다.

입력/출력 플로우: 한 프롬프트의 출력을 다음 프롬프트의 입력으로 사용하여 작업을 완료할 때까지 이를 반복합니다.

*고려해야 할 제한 사항
프롬프트 체이닝은 상당히 유용한 기법이지만, 특히 긴 체인에서 발생할 수 있는 잠재적인 문제를 숙지하고 있어야 합니다.

프롬프트 체이닝이 길어질수록 AI 도구는 대화 앞부분의 컨텍스트를 기억하기가 어려울 수 있습니다. 그러면 다음과 같은 결과가 발생할 수 있습니다.

일관성 없는 응답 제공

이전 프롬프트의 중요한 세부정보를 간과함

작업의 전반적인 목표를 유지하기 어려움

이러한 문제를 극복하고 효과적인 프롬프트 체이닝을 보장하려면 다음과 같은 전략을 고려하세요.

체크포인트 사용: 주기적으로 AI에게 전체 목표에 대한 간략한 요약을 제공하라고 요청합니다.

하위 작업 사용: 매우 복잡한 작업을 더 작은 하위 작업으로 나누어 각각을 하나의 짧은 체인으로 취급한 후 다음 작업으로 넘어갈 수 있습니다.

요약 및 되돌리기: AI 도구가 원래 목표에서 이탈하고 있다면 필수 정보를 요약하여 다시 주요 목표에 집중하도록 되돌립니다.